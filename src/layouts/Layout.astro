---
import "../styles/global.css";
import Navbar from "../components/ui/Navbar.astro";

export interface Props {
    title?: string;
    description?: string;
    image?: string;
    canonicalUrl?: string;
}

const { 
    title = "David Victoria", 
    description = "Blog personal de David Victoria", 
    image = "/og-default.jpg",
    canonicalUrl = Astro.url.href
} = Astro.props;

const pageTitle = title === "David Victoria" ? title : `${title} | David Victoria`;
const siteUrl = new URL(Astro.url.origin);
const imageUrl = image?.startsWith('http') ? image : new URL(image, siteUrl).href;
---

<!doctype html>
<html class="dark" lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        
        <!-- SEO Meta Tags -->
        <title>{pageTitle}</title>
        <meta name="description" content={description} />
        {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
        
        <!-- Open Graph Meta Tags -->
        <meta property="og:type" content="website" />
        <meta property="og:title" content={pageTitle} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={imageUrl} />
        <meta property="og:url" content={canonicalUrl} />
        <meta property="og:site_name" content="David Victoria" />
        <meta property="og:locale" content="es_ES" />
        
        <!-- Twitter Card Meta Tags -->
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={pageTitle} />
        <meta name="twitter:description" content={description} />
        <meta name="twitter:image" content={imageUrl} />
        
        <!-- Additional SEO -->
        <meta name="robots" content="index, follow" />
        <meta name="author" content="David Victoria" />
        
        <!-- Prism.js theme -->
        <link rel="stylesheet" href="/prism-catppuccin-mocha.css" />
        
        <script>
            (() => {
                'use strict';
                
                // Configuration
                const COPY_TIMEOUT = 2000;
                const BUTTON_TEXT = {
                    default: 'Copy',
                    success: 'Copied!',
                    error: 'Error'
                };
                
                // Create copy button factory
                const createCopyButton = (codeElement) => {
                    const button = document.createElement('button');
                    button.className = 'copy-button';
                    button.textContent = BUTTON_TEXT.default;
                    button.setAttribute('aria-label', 'Copy code to clipboard');
                    
                    let timeoutId = null;
                    
                    const resetButton = () => {
                        button.textContent = BUTTON_TEXT.default;
                        button.classList.remove('copied');
                        timeoutId = null;
                    };
                    
                    const handleCopy = async () => {
                        // Prevent multiple rapid clicks
                        if (timeoutId) return;
                        
                        try {
                            const text = codeElement.textContent || codeElement.innerText;
                            await navigator.clipboard.writeText(text);
                            
                            button.textContent = BUTTON_TEXT.success;
                            button.classList.add('copied');
                            
                            timeoutId = setTimeout(resetButton, COPY_TIMEOUT);
                        } catch (err) {
                            console.warn('Copy failed:', err.message);
                            button.textContent = BUTTON_TEXT.error;
                            timeoutId = setTimeout(resetButton, COPY_TIMEOUT);
                        }
                    };
                    
                    button.addEventListener('click', handleCopy);
                    return button;
                };
                
                // Initialize when DOM is ready
                const initCodeBlocks = () => {
                    const preElements = document.querySelectorAll('pre');
                    
                    preElements.forEach(pre => {
                        const codeElement = pre.querySelector('code');
                        if (!codeElement) return;
                        
                        // Create wrapper
                        const wrapper = document.createElement('div');
                        wrapper.className = 'code-block-wrapper';
                        
                        // Create button
                        const button = createCopyButton(codeElement);
                        
                        // Insert wrapper and reorganize DOM
                        pre.parentNode.insertBefore(wrapper, pre);
                        wrapper.append(pre, button);
                    });
                };
                
                // Start initialization
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', initCodeBlocks);
                } else {
                    initCodeBlocks();
                }
            })();
        </script>
        
    </head>
    <body>
        <Navbar />
        <div class="w-full max-w-7xl m-auto py-10 pt-24">
            <slot />
        </div>
    </body>
</html>

<style>
    html,
    body {
        margin: 0;
        width: 100%;
        height: 100%;
    }
</style>
